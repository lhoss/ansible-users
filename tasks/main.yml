---
- name: Creating groups
  group: name="{{item}}"
  with_items: groups_to_create
  tags: ['users','groups','configuration']

- name: Per-user group creation
  group: name="{{item.username}}" gid="{{item.gid if item.gid is defined else item.uid}}"
  with_items: users
  when: users_create_per_user_group
  tags: ['users','configuration']
  no_log: "{{no_log}}"

- name: User creation
  user: name="{{item.username}}"
        group="{{item.username if users_create_per_user_group
            else users_group}}"
        groups="{{item.groups | join(',')}}"
        shell={{item.shell if item.shell is defined else users_default_shell}}
        password="{{item.password if item.password is defined else '!'}}"
        comment="{{item.name}}"
        uid="{{item.uid}}"
        createhome="{{'yes' if users_create_homedirs else 'no'}}"
        move_home="{{'yes' if item.home_dir is defined else 'no'}}"
        home="{{item.home_dir|default(omit)}}"

  with_items: users
  tags: ['users','configuration']
  no_log: "{{no_log}}"

- name: SSH keys
  authorized_key: user="{{item.0.username}}" key="{{item.1}}" key_options="{{item.0.ssh_key_opts|default(omit)}}"
  with_subelements:
    - users
    - ssh_key
  tags: ['users','configuration']
  no_log: "{{no_log}}"

- name: Create ansible sudoers in temp directory
  template: src=etc/sudoers.d/ansible.j2 dest=/tmp/ansible
  tags: ['users','configuration']
  no_log: "{{no_log}}"

- name: Check ansible sudoers syntax
  command: visudo -cf /tmp/ansible
  register: visudo_output
  changed_when: false
  ignore_errors: yes
  tags: ['users','configuration']

- name: Ansible sudoers validation succeeded - move to dest
  command: mv /tmp/ansible /etc/sudoers.d/
  when: visudo_output|success
  changed_when: false
  tags: ['users','configuration']

- name: Ansible sudoers validation failed - remove tmp file
  command: rm /tmp/ansible
  when: visudo_output|failed
  changed_when: false
  tags: ['users','configuration']

- name: Deleted user removal
  user: name="{{item.username}}" state=absent
  with_items: users_deleted
  tags: ['users','configuration']

- name: Deleted per-user group removal
  group: name="{{item.username}}" state=absent
  with_items: users_deleted
  when: users_create_per_user_group
  tags: ['users','configuration']
